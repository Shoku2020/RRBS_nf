Path to genome folder specified as: bismarkindex/
Aligner to be used: >> HISAT2 <<
Writing bisulfite genomes out into a single MFA (multi FastA) file

Bismark Genome Preparation - Step I: Preparing folders

Bisulfite Genome Indexer version v0.22.3 (last modified: 14 April 2019)
Created Bisulfite Genome folder /Myvolume/fyan0011/GitHub/RRBS_nf/work/fe/b6fcb1f8af147698f6f786b74c1b09/bismarkindex/Bisulfite_Genome/
Created Bisulfite Genome folder /Myvolume/fyan0011/GitHub/RRBS_nf/work/fe/b6fcb1f8af147698f6f786b74c1b09/bismarkindex/Bisulfite_Genome/CT_conversion/
Created Bisulfite Genome folder /Myvolume/fyan0011/GitHub/RRBS_nf/work/fe/b6fcb1f8af147698f6f786b74c1b09/bismarkindex/Bisulfite_Genome/GA_conversion/
Bismark Genome Preparation - Step II: Bisulfite converting reference genome


Step I - Prepare genome folders - completed


conversions performed:
chromosome	C->T	G->A

Step II - Genome bisulfite conversions - completed


chr22	8375984	8369235

Total number of conversions performed:
C->T:	8375984
G->A:	8369235
Bismark Genome Preparation - Step III: Launching the HISAT2 indexer
Please be aware that this process can - depending on genome size - take several hours!

Preparing indexing of CT converted genome in /Myvolume/fyan0011/GitHub/RRBS_nf/work/fe/b6fcb1f8af147698f6f786b74c1b09/bismarkindex/Bisulfite_Genome/CT_conversion/
Parent process: Starting to index C->T converted genome with the following command:

hisat2-build  -f genome_mfa.CT_conversion.fa BS_CT

Settings:
  Output files: "BS_CT.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  genome_mfa.CT_conversion.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:01
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 6542727 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 6542727 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
Preparing indexing of GA converted genome in /Myvolume/fyan0011/GitHub/RRBS_nf/work/fe/b6fcb1f8af147698f6f786b74c1b09/bismarkindex/Bisulfite_Genome/GA_conversion/
Child process: Starting to index G->A converted genome with the following command:

hisat2-build  -f genome_mfa.GA_conversion.fa BS_GA

Settings:
  Output files: "BS_GA.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  genome_mfa.GA_conversion.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  V-Sorting samples time: 00:00:01
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Time to join reference sequences: 00:00:01
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 6542727 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 6542727 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:01
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 8; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.87717e+06 (target: 6542726)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 9
  Reserving size (6542727) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 2314375 for bucket 1
  (Using difference cover)
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 4.98493e+06 (target: 6542726)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
  Reserving size (6542727) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 5739867 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 2314376 for bucket 1
Getting block 2 of 9
  Reserving size (6542727) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 6251332 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:02
Returning block of 5739868 for bucket 1
Getting block 2 of 7
  Reserving size (6542727) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 6300065 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 6251333 for bucket 2
Getting block 3 of 9
  Reserving size (6542727) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 4250887 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 6300066 for bucket 2
Getting block 3 of 7
  Reserving size (6542727) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 3697124 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:02
Returning block of 4250888 for bucket 3
Getting block 4 of 9
  Reserving size (6542727) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 4714240 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 3697125 for bucket 3
Getting block 4 of 7
  Reserving size (6542727) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 3710522 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:02
Returning block of 4714241 for bucket 4
  Sorting block time: 00:00:02
Returning block of 3710523 for bucket 4
Getting block 5 of 9
  Reserving size (6542727) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
Getting block 5 of 7
  Reserving size (6542727) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 20%
  bucket 5: 10%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 20%
  bucket 5: 50%
  bucket 5: 30%
  bucket 5: 60%
  bucket 5: 40%
  bucket 5: 70%
  bucket 5: 50%
  bucket 5: 80%
  bucket 5: 60%
  bucket 5: 90%
  bucket 5: 70%
  bucket 5: 100%
  Sorting block of length 2630263 for bucket 5
  (Using difference cover)
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 6440001 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:02
Returning block of 2630264 for bucket 5
Getting block 6 of 9
  Reserving size (6542727) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 4114883 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:02
Returning block of 6440002 for bucket 5
Getting block 6 of 7
  Reserving size (6542727) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 3730121 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:02
Returning block of 4114884 for bucket 6
Getting block 7 of 9
  Reserving size (6542727) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  Sorting block time: 00:00:01
Returning block of 3730122 for bucket 6
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 3667155 for bucket 7
  (Using difference cover)
Getting block 7 of 7
  Reserving size (6542727) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 5276839 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:02
Returning block of 3667156 for bucket 7
Getting block 8 of 9
  Reserving size (6542727) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  Sorting block time: 00:00:02
Returning block of 5276840 for bucket 7
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 6248538 for bucket 8
  (Using difference cover)
Exited GFM loop
fchr[A]: 0
fchr[C]: 17464010
fchr[G]: 25839994
fchr[T]: 25839994
fchr[$]: 34894545
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 15826308 bytes to primary GFM file: BS_GA.1.ht2
Wrote 8723644 bytes to secondary GFM file: BS_GA.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
  Sorting block time: 00:00:03
Returning block of 6248539 for bucket 8
Getting block 9 of 9
  Reserving size (6542727) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 702864 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 702865 for bucket 9
Exited GFM loop
fchr[A]: 0
fchr[C]: 9094775
fchr[G]: 9094775
fchr[T]: 17464010
fchr[$]: 34894545
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 15826308 bytes to primary GFM file: BS_CT.1.ht2
Wrote 8723644 bytes to secondary GFM file: BS_CT.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 15353415 bytes to primary GFM file: BS_GA.5.ht2
Wrote 8883598 bytes to secondary GFM file: BS_GA.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 34894545
    gbwtLen: 34894546
    nodes: 34894546
    sz: 8723637
    gbwtSz: 8723637
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 2180910
    offsSz: 8723640
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 181743
    numLines: 181743
    gbwtTotLen: 11631552
    gbwtTotSz: 11631552
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:30
Returning from initFromVector
Wrote 15353415 bytes to primary GFM file: BS_CT.5.ht2
Wrote 8883598 bytes to secondary GFM file: BS_CT.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 34894545
    gbwtLen: 34894546
    nodes: 34894546
    sz: 8723637
    gbwtSz: 8723637
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 2180910
    offsSz: 8723640
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 181743
    numLines: 181743
    gbwtTotLen: 11631552
    gbwtTotSz: 11631552
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:34
